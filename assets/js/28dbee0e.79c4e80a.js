"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[740],{7567:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"scenarios/Virtual_partitions","title":"Virtual Partitions","description":"This scenario demonstrates how to use virtual partitions in Streamstone.","source":"@site/docs/scenarios/Virtual_partitions.md","sourceDirName":"scenarios","slug":"/scenarios/Virtual_partitions","permalink":"/Streamstone/docs/scenarios/Virtual_partitions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Custom Stream Metadata","permalink":"/Streamstone/docs/scenarios/S07_Custom_stream_metadata"},"next":{"title":"Optimistic Concurrency","permalink":"/Streamstone/docs/scenarios/S08_Concurrency_conflicts"}}');var r=e(4848),i=e(8453);const s={},o="Virtual Partitions",c={},l=[];function u(t){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"virtual-partitions",children:"Virtual Partitions"})}),"\n",(0,r.jsx)(n.p,{children:"This scenario demonstrates how to use virtual partitions in Streamstone."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="Virtual_partitions.cs"',children:'using System.Collections.Generic;\nusing System.Threading.Tasks;\n\nusing Azure.Data.Tables;\n\nusing NUnit.Framework;\n\nnamespace Streamstone.Scenarios\n{\n    [TestFixture]\n    public class Virtual_partitions\n    {\n        TableClient table;\n        \n        Partition partition;\n        Partition virtual1;\n        Partition virtual2;\n\n        [SetUp]\n        public void SetUp()\n        {\n            table = Storage.SetUp();\n\n            partition = new Partition(table, "test");\n            virtual1  = new Partition(table, "test|123");\n            virtual2  = new Partition(table, "test", "456");\n        }\n\n        [Test]\n        public async Task When_provisioning()\n        {\n            await Stream.ProvisionAsync(virtual1);\n            await Stream.ProvisionAsync(virtual2);\n\n            Assert.That(partition.RetrieveAll().Count, Is.EqualTo(2));\n        }\n\n        [Test]\n        public async Task When_opening()\n        {\n            await Stream.ProvisionAsync(virtual1);\n\n            Assert.True((await Stream.TryOpenAsync(virtual1)).Found);\n            Assert.False((await Stream.TryOpenAsync(virtual2)).Found);\n        }\n\n        [Test]\n        public async Task When_writing_and_reading()\n        {\n            var stream1 = new Stream(virtual1);\n            var stream2 = new Stream(virtual2);\n\n            var e1 = CreateEvent("e1");\n            var e2 = CreateEvent("e2");\n\n            await Stream.WriteAsync(stream1, e1, e2);\n            await Stream.WriteAsync(stream2, e1, e2);\n\n            Assert.That(partition.RetrieveAll().Count, \n                Is.EqualTo(2 + 2*(2*2)));\n\n            var slice1 = await Stream.ReadAsync<TestRecordedEventEntity>(virtual1);\n            var slice2 = await Stream.ReadAsync<TestRecordedEventEntity>(virtual2);\n\n            Assert.That(slice1.Events.Length, Is.EqualTo(2));\n            Assert.That(slice2.Events.Length, Is.EqualTo(2));\n        }\n\n        static EventData CreateEvent(string id)\n        {\n            var properties = new Dictionary<string, object>\n            {\n                {"Type", "StreamChanged"},\n                {"Data", "{}"}\n            };\n\n            return new EventData(EventId.From(id), EventProperties.From(properties));\n        }\n    }\n}\n'})})]})}function p(t={}){const{wrapper:n}={...(0,i.R)(),...t.components};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}},8453:(t,n,e)=>{e.d(n,{R:()=>s,x:()=>o});var a=e(6540);const r={},i=a.createContext(r);function s(t){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function o(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:s(t.components),a.createElement(i.Provider,{value:n},t.children)}}}]);