"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[372],{6304:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"scenarios/S09_Handling_duplicates","title":"Handling Duplicate Events","description":"This scenario demonstrates how to handle duplicate events in Streamstone.","source":"@site/docs/scenarios/S09_Handling_duplicates.md","sourceDirName":"scenarios","slug":"/scenarios/S09_Handling_duplicates","permalink":"/Streamstone/docs/scenarios/S09_Handling_duplicates","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Optimistic Concurrency","permalink":"/Streamstone/docs/scenarios/S08_Concurrency_conflicts"},"next":{"title":"Implementing a Stream Directory","permalink":"/Streamstone/docs/scenarios/S10_Stream_directory"}}');var a=t(4848),i=t(8453);const r={},c="Handling Duplicate Events",o={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"handling-duplicate-events",children:"Handling Duplicate Events"})}),"\n",(0,a.jsx)(n.p,{children:"This scenario demonstrates how to handle duplicate events in Streamstone."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:'title="S09_Handling_duplicates.cs"',children:'using System;\nusing System.Threading.Tasks;\n\nusing Streamstone;\n\nnamespace Example.Scenarios\n{\n    public class S09_Handling_duplicates : Scenario\n    {\n        public override async Task RunAsync()\n        {\n            var result = await Stream.WriteAsync(new Stream(Partition), new EventData(EventId.From("42")));\n\n            try\n            {\n                var events = new[]\n                {\n                    new EventData(EventId.From("56")),\n                    new EventData(EventId.From("42"))  // conflicting (duplicate) event\n                };\n\n                await Stream.WriteAsync(result.Stream, events);\n            }\n            catch (DuplicateEventException)\n            {\n                Console.WriteLine("Duplicate event detection is based on ID of the event.");\n                Console.WriteLine("An ID of conflicting event will be reported back as a property of DuplicateEventException.");\n                Console.WriteLine("The caller can use this information to remove conflicting event from the batch and retry (or cancel)");\n            }\n        }\n    }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);