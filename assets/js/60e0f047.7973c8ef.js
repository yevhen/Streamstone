"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[731],{3691:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"scenarios/S11_Sharding_streams","title":"Sharding Streams","description":"This scenario demonstrates how to shard streams in Streamstone.","source":"@site/docs/scenarios/S11_Sharding_streams.md","sourceDirName":"scenarios","slug":"/scenarios/S11_Sharding_streams","permalink":"/Streamstone/docs/scenarios/S11_Sharding_streams","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Implementing a Stream Directory","permalink":"/Streamstone/docs/scenarios/S10_Stream_directory"},"next":{"title":"Design","permalink":"/Streamstone/docs/design"}}');var s=t(4848),a=t(8453);const i={},o="Sharding Streams",c={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sharding-streams",children:"Sharding Streams"})}),"\n",(0,s.jsx)(n.p,{children:"This scenario demonstrates how to shard streams in Streamstone."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="S11_Sharding_streams.cs"',children:'using System.Threading.Tasks;\n\nusing Azure.Data.Tables;\n\nusing Streamstone;\n\nnamespace Example.Scenarios\n{\n    public class S11_Sharding_streams : Scenario\n    {\n        const string DevelopmentConnectionString = "UseDevelopmentStorage=true";\n\n        readonly TableServiceClient[] pool =              \n        {\n            new TableServiceClient(DevelopmentConnectionString),\n            new TableServiceClient(DevelopmentConnectionString) // pretend this is some other account\n        };\n\n        public override async Task RunAsync()\n        {\n            var partition1 = Resolve("shard-test-1");\n            var partition2 = Resolve("shard-test-2");\n\n            await Stream.ProvisionAsync(partition1);\n            await Stream.ProvisionAsync(partition2);\n        }\n\n        Partition Resolve(string stream)\n        {\n            var client = pool[Shard.Resolve(stream, pool.Length)];\n            var table = client.GetTableClient(Table.Name);\n            return new Partition(table, $"{Partition.Key}_{stream}");\n        }\n    }\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);