"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[236],{8453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>o});var a=n(6540);const r={},i=a.createContext(r);function s(t){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:s(t.components),a.createElement(i.Provider,{value:e},t.children)}},8506:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"scenarios/S07_Custom_stream_metadata","title":"Custom Stream Metadata","description":"This scenario demonstrates how to use custom stream metadata in Streamstone.","source":"@site/docs/scenarios/S07_Custom_stream_metadata.md","sourceDirName":"scenarios","slug":"/scenarios/S07_Custom_stream_metadata","permalink":"/Streamstone/docs/scenarios/S07_Custom_stream_metadata","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Additional Entity Includes","permalink":"/Streamstone/docs/scenarios/S06_Include_additional_entities"},"next":{"title":"Virtual Partitions","permalink":"/Streamstone/docs/scenarios/Virtual_partitions"}}');var r=n(4848),i=n(8453);const s={},o="Custom Stream Metadata",m={},c=[];function p(t){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"custom-stream-metadata",children:"Custom Stream Metadata"})}),"\n",(0,r.jsx)(e.p,{children:"This scenario demonstrates how to use custom stream metadata in Streamstone."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",metastring:'title="S07_Custom_stream_metadata.cs"',children:'using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nusing Azure.Data.Tables;\n\nusing Streamstone;\n\nnamespace Example.Scenarios\n{\n    public class S07_Custom_stream_metadata : Scenario\n    {\n        public override async Task RunAsync()\n        {\n            await SpecifyingForExistingStream();\n            await SpecifyingDuringWritingToNewStream();\n            await UpdatingForExistingStream();\n        }\n\n        async Task SpecifyingForExistingStream()\n        {\n            var partition = new Partition(Table, Id + ".a");\n\n            var properties = new Dictionary<string, object>\n            {\n                {"Created", DateTimeOffset.Now},\n                {"Active",  true}\n            };\n            \n            await Stream.ProvisionAsync(partition, StreamProperties.From(properties));\n            \n            Console.WriteLine("Stream metadata specified during provisioning in partition \'{0}\'", \n                              partition);\n\n            var stream = await Stream.OpenAsync(partition);\n            Print(stream.Properties);\n        }\n\n        async Task SpecifyingDuringWritingToNewStream()\n        {\n            var partition = new Partition(Table, Id + ".b");\n\n            var properties = new Dictionary<string, object>\n            {\n                {"Created", DateTimeOffset.Now},\n                {"Active",  true}\n            };\n\n            var stream = new Stream(partition, StreamProperties.From(properties));\n            await Stream.WriteAsync(stream, new EventData());\n\n            Console.WriteLine("Stream metadata specified during writing to new stream in partition \'{0}\'", \n                              partition);\n\n            stream = await Stream.OpenAsync(partition);\n            Print(stream.Properties);\n        }\n\n        async Task UpdatingForExistingStream()\n        {\n            var partition = new Partition(Table, Id + ".c");\n\n            var properties = new Dictionary<string, object>\n            {\n                {"Created", DateTimeOffset.Now},\n                {"Active",  true}\n            };\n\n            await Stream.ProvisionAsync(partition, StreamProperties.From(properties));\n\n            Console.WriteLine("Stream metadata specified for stream in partition \'{0}\'", \n                              partition);\n\n            var stream = await Stream.OpenAsync(partition);\n            Print(stream.Properties);\n\n            properties["Active"] = false;\n            await Stream.SetPropertiesAsync(stream, StreamProperties.From(properties));\n\n            Console.WriteLine("Updated stream metadata in partition \'{0}\'", partition);\n\n            stream = await Stream.OpenAsync(partition);\n            Print(stream.Properties);\n        }\n\n        static void Print(IEnumerable<KeyValuePair<string, object>> properties)\n        {\n            foreach (var property in properties)\n                Console.WriteLine("\\t{0}={1}", property.Key, property.Value);\n        }\n    }\n}\n'})})]})}function d(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(p,{...t})}):p(t)}}}]);