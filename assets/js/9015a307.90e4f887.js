"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[745],{8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},9152:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"scenarios/S01_Provision_new_stream","title":"Provisioning a New Stream","description":"This scenario demonstrates how to provision a new stream in Streamstone.","source":"@site/docs/scenarios/S01_Provision_new_stream.md","sourceDirName":"scenarios","slug":"/scenarios/S01_Provision_new_stream","permalink":"/Streamstone/docs/scenarios/S01_Provision_new_stream","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/Streamstone/docs/usage"},"next":{"title":"Opening a Stream","permalink":"/Streamstone/docs/scenarios/S02_Open_stream_for_writing"}}');var r=s(4848),i=s(8453);const o={},a="Provisioning a New Stream",c={},m=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"provisioning-a-new-stream",children:"Provisioning a New Stream"})}),"\n",(0,r.jsx)(n.p,{children:"This scenario demonstrates how to provision a new stream in Streamstone."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="S01_Provision_new_stream.cs"',children:'using System;\nusing System.Threading.Tasks;\n\nusing Streamstone;\n\nnamespace Example.Scenarios\n{\n    public class S01_Provision_new_stream : Scenario\n    {\n        public override async Task RunAsync()\n        {\n            var stream = await Stream.ProvisionAsync(Partition);\n\n            Console.WriteLine("Provisioned new empty stream in partition \'{0}\'", stream.Partition);\n            Console.WriteLine("Etag: {0}",       stream.ETag);\n            Console.WriteLine("Version: {0}",    stream.Version);\n\n            var exists = await Stream.ExistsAsync(Partition);\n            Console.WriteLine("Checking stream exists in a storage: {0}", exists);\n        }\n    }\n} \n'})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);