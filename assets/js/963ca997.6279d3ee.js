"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[462],{1149:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"scenarios/S04_Write_to_stream","title":"Writing to a Stream","description":"This scenario demonstrates how to write to a stream in Streamstone.","source":"@site/docs/scenarios/S04_Write_to_stream.md","sourceDirName":"scenarios","slug":"/scenarios/S04_Write_to_stream","permalink":"/Streamstone/docs/scenarios/S04_Write_to_stream","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Opening a Stream","permalink":"/Streamstone/docs/scenarios/S02_Open_stream_for_writing"},"next":{"title":"Reading from a Stream","permalink":"/Streamstone/docs/scenarios/S05_Read_from_stream"}}');var a=t(4848),i=t(8453);const s={},o="Writing to a Stream",m={},c=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"writing-to-a-stream",children:"Writing to a Stream"})}),"\n",(0,a.jsx)(n.p,{children:"This scenario demonstrates how to write to a stream in Streamstone."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:'title="S04_Write_to_stream.cs"',children:'using System;\nusing System.Linq;\n\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Bson;\n\nusing Streamstone;\nusing System.Diagnostics;\n\nnamespace Example.Scenarios\n{\n    using System.Threading.Tasks;\n\n    public class S04_Write_to_stream : Scenario\n    {\n        public override async Task RunAsync()\n        {\n            await WriteToExistingOrCreateNewStream();\n            await WriteSequentiallyToExistingStream();\n            await WriteMultipleStreamsInParallel();\n        }\n\n        async Task WriteToExistingOrCreateNewStream()\n        {\n            var existent = await Stream.TryOpenAsync(Partition);\n\n            var stream = existent.Found \n                ? existent.Stream \n                : new Stream(Partition);\n\n            Console.WriteLine("Writing to new stream in partition \'{0}\'", stream.Partition);\n\n            var result = await Stream.WriteAsync(stream,\n                Event(new InventoryItemCreated(Id, "iPhone6")),\n                Event(new InventoryItemCheckedIn(Id, 100)));\n\n            Console.WriteLine("Successfully written to new stream.\\r\\nEtag: {0}, Version: {1}", \n                              result.Stream.ETag, result.Stream.Version);\n        }\n\n        async Task WriteSequentiallyToExistingStream()\n        {\n            var stream = await Stream.OpenAsync(Partition);\n\n            Console.WriteLine("Writing sequentially to existing stream in partition \'{0}\'", stream.Partition);\n            Console.WriteLine("Etag: {0}, Version: {1}", stream.ETag, stream.Version);\n\n            for (var i = 1; i <= 10; i++)\n            {\n                var result = await Stream.WriteAsync(stream, \n                    Event(new InventoryItemCheckedIn(Id, i*100)));\n\n                Console.WriteLine("Successfully written event \'{0}\' under version \'{1}\'",\n                                   result.Events[0].Id, result.Events[0].Version);\n\n                Console.WriteLine("Etag: {0}, Version: {1}",\n                                   result.Stream.ETag, result.Stream.Version);\n\n                stream = result.Stream;\n            }\n        }\n\n        async Task WriteMultipleStreamsInParallel()\n        {\n            const int streamsToWrite = 5;\n\n            await Task.WhenAll(Enumerable.Range(1, streamsToWrite).Select(async streamIndex =>\n            {\n                var partition = new Partition(Partition.Table, $"WriteMultipleStreamsInParallel-{streamIndex}");\n\n                var existent = await Stream.TryOpenAsync(partition);\n\n                var stream = existent.Found\n                    ? existent.Stream\n                    : new Stream(partition);\n\n                Console.WriteLine("Writing to new stream in partition \'{0}\'", partition);\n                var stopwatch = Stopwatch.StartNew();\n\n                for (var i = 1; i <= 5; i++)\n                {\n                    var events = Enumerable.Range(1, 10)\n                        .Select(_ => Event(new InventoryItemCheckedIn(partition.Key, i * 1000 + streamIndex)))\n                        .ToArray();\n\n                    var result = await Stream.WriteAsync(stream, events);\n                    stream = result.Stream;\n                }\n\n                stopwatch.Stop();\n                Console.WriteLine("Finished writing 300 events to new stream in partition \'{0}\' in {1}ms", stream.Partition, stopwatch.ElapsedMilliseconds);\n            }));\n        }\n\n        static EventData Event(object e)\n        {\n            var id = Guid.NewGuid();\n\n            var properties = new\n            {\n                Id = id,                 // id that you specify for Event ctor is used only for duplicate event detection\n                Type = e.GetType().Name, // you can include any number of custom properties along with event\n                Data = JSON(e),          // you\'re free to choose any name you like for data property\n                Bin = BSON(e)            // and any storage format: binary, string, whatever (any EdmType)\n            };\n\n            return new EventData(EventId.From(id), EventProperties.From(properties));\n        }\n\n        static string JSON(object data)\n        {\n            return JsonConvert.SerializeObject(data);\n        }\n\n        static byte[] BSON(object data)\n        {\n            var stream = new System.IO.MemoryStream();\n            \n            using (var writer = new BsonDataWriter(stream))\n            {\n                var serializer = new JsonSerializer();\n                serializer.Serialize(writer, data);\n            }\n\n            return stream.ToArray();\n        }\n    }\n} \n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);