"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[56],{8141:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"scenarios/S05_Read_from_stream","title":"Reading from a Stream","description":"This scenario demonstrates how to read from a stream in Streamstone.","source":"@site/docs/scenarios/S05_Read_from_stream.md","sourceDirName":"scenarios","slug":"/scenarios/S05_Read_from_stream","permalink":"/Streamstone/docs/scenarios/S05_Read_from_stream","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Writing to a Stream","permalink":"/Streamstone/docs/scenarios/S04_Write_to_stream"},"next":{"title":"Additional Entity Includes","permalink":"/Streamstone/docs/scenarios/S06_Include_additional_entities"}}');var a=r(4848),s=r(8453);const i={},o="Reading from a Stream",c={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"reading-from-a-stream",children:"Reading from a Stream"})}),"\n",(0,a.jsx)(n.p,{children:"This scenario demonstrates how to read from a stream in Streamstone."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:'title="S05_Read_from_stream.cs"',children:'using System;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nusing Streamstone;\r\n\r\nnamespace Example.Scenarios\r\n{\r\n    public class S05_Read_from_stream : Scenario\r\n    {\r\n        public override async Task RunAsync()\r\n        {\r\n            await Prepare();\r\n            await ReadSlice();\r\n            await ReadAll();\r\n        }\r\n\r\n        async Task Prepare()\r\n        {\r\n            var events = Enumerable\r\n                .Range(1, 10)\r\n                .Select(Event)\r\n                .ToArray();\r\n\r\n            var existent = await Stream.TryOpenAsync(Partition);\r\n\t        var stream = existent.Found ? existent.Stream : new Stream(Partition);\r\n\t        await Stream.WriteAsync(stream, events);\r\n        }\r\n\r\n        async Task ReadSlice()\r\n        {\r\n            Console.WriteLine("Reading single slice from specified start version and using specified slice size");\r\n\r\n            var slice = await Stream.ReadAsync<EventEntity>(Partition, startVersion: 2, sliceSize: 2);\r\n            foreach (var @event in slice.Events)\r\n                Console.WriteLine("{0}: {1}-{2}", @event.Version, @event.Type, @event.Data);\r\n\r\n            Console.WriteLine();\r\n        }\r\n\r\n        async Task ReadAll()\r\n        {\r\n            Console.WriteLine("Reading all events in a stream");\r\n            Console.WriteLine("If slice size is > than WATS limit, continuation token will be managed automatically");\r\n\r\n            StreamSlice<EventEntity> slice;\r\n            var nextSliceStart = 1;\r\n\r\n            do\r\n            {\r\n                slice = await Stream.ReadAsync<EventEntity>(Partition, nextSliceStart, sliceSize: 1);\r\n\r\n                foreach (var @event in slice.Events)\r\n                    Console.WriteLine("{0}:{1} {2}-{3}", @event.Id, @event.Version, @event.Type, @event.Data);\r\n\r\n                nextSliceStart = slice.HasEvents \r\n                    ? slice.Events.Last().Version + 1 \r\n                    : -1;\r\n            }\r\n            while (!slice.IsEndOfStream);\r\n        }\r\n\r\n        static EventData Event(int id)\r\n        {\r\n            var properties = new\r\n            {\r\n                Id = id,\r\n                Type = "<type>",\r\n                Data = "{some}"\r\n            };\r\n\r\n            return new EventData(EventId.From(id.ToString()), EventProperties.From(properties));\r\n        }\r\n\r\n        class EventEntity\r\n        {\r\n            public int Id      { get; set; }\r\n            public string Type { get; set; }\r\n            public string Data { get; set; }\r\n            public int Version { get; set; }\r\n        }\r\n    }\r\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);